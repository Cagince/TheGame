schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
columns and relationships of "Account"
"""
type Account {
  """An object relationship"""
  Player: Player!
  identifier: String!
  linkToProof: String
  player_id: uuid!
  type: profile_type!
}

"""
aggregated selection of "Account"
"""
type Account_aggregate {
  aggregate: Account_aggregate_fields
  nodes: [Account!]!
}

"""
aggregate fields of "Account"
"""
type Account_aggregate_fields {
  count(columns: [Account_select_column!], distinct: Boolean): Int
  max: Account_max_fields
  min: Account_min_fields
}

"""
order by aggregate values of table "Account"
"""
input Account_aggregate_order_by {
  count: order_by
  max: Account_max_order_by
  min: Account_min_order_by
}

"""
input type for inserting array relation for remote table "Account"
"""
input Account_arr_rel_insert_input {
  data: [Account_insert_input!]!
  on_conflict: Account_on_conflict
}

"""
Boolean expression to filter rows from the table "Account". All fields are combined with a logical 'AND'.
"""
input Account_bool_exp {
  Player: Player_bool_exp
  _and: [Account_bool_exp]
  _not: Account_bool_exp
  _or: [Account_bool_exp]
  identifier: String_comparison_exp
  linkToProof: String_comparison_exp
  player_id: uuid_comparison_exp
  type: profile_type_comparison_exp
}

"""
unique or primary key constraints on table "Account"
"""
enum Account_constraint {
  """unique or primary key constraint"""
  Account_identifier_key

  """unique or primary key constraint"""
  Account_pkey
}

"""
input type for inserting data into table "Account"
"""
input Account_insert_input {
  Player: Player_obj_rel_insert_input
  identifier: String
  linkToProof: String
  player_id: uuid
  type: profile_type
}

"""aggregate max on columns"""
type Account_max_fields {
  identifier: String
  linkToProof: String
  player_id: uuid
}

"""
order by max() on columns of table "Account"
"""
input Account_max_order_by {
  identifier: order_by
  linkToProof: order_by
  player_id: order_by
}

"""aggregate min on columns"""
type Account_min_fields {
  identifier: String
  linkToProof: String
  player_id: uuid
}

"""
order by min() on columns of table "Account"
"""
input Account_min_order_by {
  identifier: order_by
  linkToProof: order_by
  player_id: order_by
}

"""
response of any mutation on the table "Account"
"""
type Account_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Account!]!
}

"""
input type for inserting object relation for remote table "Account"
"""
input Account_obj_rel_insert_input {
  data: Account_insert_input!
  on_conflict: Account_on_conflict
}

"""
on conflict condition type for table "Account"
"""
input Account_on_conflict {
  constraint: Account_constraint!
  update_columns: [Account_update_column!]!
  where: Account_bool_exp
}

"""
ordering options when selecting data from "Account"
"""
input Account_order_by {
  Player: Player_order_by
  identifier: order_by
  linkToProof: order_by
  player_id: order_by
  type: order_by
}

"""
primary key columns input for table: "Account"
"""
input Account_pk_columns_input {
  identifier: String!
}

"""
select columns of table "Account"
"""
enum Account_select_column {
  """column name"""
  identifier

  """column name"""
  linkToProof

  """column name"""
  player_id

  """column name"""
  type
}

"""
input type for updating data in table "Account"
"""
input Account_set_input {
  identifier: String
  linkToProof: String
  player_id: uuid
  type: profile_type
}

"""
update columns of table "Account"
"""
enum Account_update_column {
  """column name"""
  identifier

  """column name"""
  linkToProof

  """column name"""
  player_id

  """column name"""
  type
}

"""
columns and relationships of "caca"
"""
type caca {
  id: Int!
  val: String!
}

"""
aggregated selection of "caca"
"""
type caca_aggregate {
  aggregate: caca_aggregate_fields
  nodes: [caca!]!
}

"""
aggregate fields of "caca"
"""
type caca_aggregate_fields {
  avg: caca_avg_fields
  count(columns: [caca_select_column!], distinct: Boolean): Int
  max: caca_max_fields
  min: caca_min_fields
  stddev: caca_stddev_fields
  stddev_pop: caca_stddev_pop_fields
  stddev_samp: caca_stddev_samp_fields
  sum: caca_sum_fields
  var_pop: caca_var_pop_fields
  var_samp: caca_var_samp_fields
  variance: caca_variance_fields
}

"""
order by aggregate values of table "caca"
"""
input caca_aggregate_order_by {
  avg: caca_avg_order_by
  count: order_by
  max: caca_max_order_by
  min: caca_min_order_by
  stddev: caca_stddev_order_by
  stddev_pop: caca_stddev_pop_order_by
  stddev_samp: caca_stddev_samp_order_by
  sum: caca_sum_order_by
  var_pop: caca_var_pop_order_by
  var_samp: caca_var_samp_order_by
  variance: caca_variance_order_by
}

"""
input type for inserting array relation for remote table "caca"
"""
input caca_arr_rel_insert_input {
  data: [caca_insert_input!]!
  on_conflict: caca_on_conflict
}

"""aggregate avg on columns"""
type caca_avg_fields {
  id: Float
}

"""
order by avg() on columns of table "caca"
"""
input caca_avg_order_by {
  id: order_by
}

"""
Boolean expression to filter rows from the table "caca". All fields are combined with a logical 'AND'.
"""
input caca_bool_exp {
  _and: [caca_bool_exp]
  _not: caca_bool_exp
  _or: [caca_bool_exp]
  id: Int_comparison_exp
  val: String_comparison_exp
}

"""
unique or primary key constraints on table "caca"
"""
enum caca_constraint {
  """unique or primary key constraint"""
  caca_pkey
}

"""
input type for incrementing integer column in table "caca"
"""
input caca_inc_input {
  id: Int
}

"""
input type for inserting data into table "caca"
"""
input caca_insert_input {
  id: Int
  val: String
}

"""aggregate max on columns"""
type caca_max_fields {
  id: Int
  val: String
}

"""
order by max() on columns of table "caca"
"""
input caca_max_order_by {
  id: order_by
  val: order_by
}

"""aggregate min on columns"""
type caca_min_fields {
  id: Int
  val: String
}

"""
order by min() on columns of table "caca"
"""
input caca_min_order_by {
  id: order_by
  val: order_by
}

"""
response of any mutation on the table "caca"
"""
type caca_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [caca!]!
}

"""
input type for inserting object relation for remote table "caca"
"""
input caca_obj_rel_insert_input {
  data: caca_insert_input!
  on_conflict: caca_on_conflict
}

"""
on conflict condition type for table "caca"
"""
input caca_on_conflict {
  constraint: caca_constraint!
  update_columns: [caca_update_column!]!
  where: caca_bool_exp
}

"""
ordering options when selecting data from "caca"
"""
input caca_order_by {
  id: order_by
  val: order_by
}

"""
primary key columns input for table: "caca"
"""
input caca_pk_columns_input {
  id: Int!
}

"""
select columns of table "caca"
"""
enum caca_select_column {
  """column name"""
  id

  """column name"""
  val
}

"""
input type for updating data in table "caca"
"""
input caca_set_input {
  id: Int
  val: String
}

"""aggregate stddev on columns"""
type caca_stddev_fields {
  id: Float
}

"""
order by stddev() on columns of table "caca"
"""
input caca_stddev_order_by {
  id: order_by
}

"""aggregate stddev_pop on columns"""
type caca_stddev_pop_fields {
  id: Float
}

"""
order by stddev_pop() on columns of table "caca"
"""
input caca_stddev_pop_order_by {
  id: order_by
}

"""aggregate stddev_samp on columns"""
type caca_stddev_samp_fields {
  id: Float
}

"""
order by stddev_samp() on columns of table "caca"
"""
input caca_stddev_samp_order_by {
  id: order_by
}

"""aggregate sum on columns"""
type caca_sum_fields {
  id: Int
}

"""
order by sum() on columns of table "caca"
"""
input caca_sum_order_by {
  id: order_by
}

"""
update columns of table "caca"
"""
enum caca_update_column {
  """column name"""
  id

  """column name"""
  val
}

"""aggregate var_pop on columns"""
type caca_var_pop_fields {
  id: Float
}

"""
order by var_pop() on columns of table "caca"
"""
input caca_var_pop_order_by {
  id: order_by
}

"""aggregate var_samp on columns"""
type caca_var_samp_fields {
  id: Float
}

"""
order by var_samp() on columns of table "caca"
"""
input caca_var_samp_order_by {
  id: order_by
}

"""aggregate variance on columns"""
type caca_variance_fields {
  id: Float
}

"""
order by variance() on columns of table "caca"
"""
input caca_variance_order_by {
  id: order_by
}

scalar date

"""
expression to compare columns of type date. All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "Guild"
"""
type Guild {
  """An array relationship"""
  Guild_Members(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): [Guild_Member!]!

  """An aggregated array relationship"""
  Guild_Members_aggregate(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): Guild_Member_aggregate!
  id: uuid!
  name: String
}

"""
aggregated selection of "Guild"
"""
type Guild_aggregate {
  aggregate: Guild_aggregate_fields
  nodes: [Guild!]!
}

"""
aggregate fields of "Guild"
"""
type Guild_aggregate_fields {
  count(columns: [Guild_select_column!], distinct: Boolean): Int
  max: Guild_max_fields
  min: Guild_min_fields
}

"""
order by aggregate values of table "Guild"
"""
input Guild_aggregate_order_by {
  count: order_by
  max: Guild_max_order_by
  min: Guild_min_order_by
}

"""
input type for inserting array relation for remote table "Guild"
"""
input Guild_arr_rel_insert_input {
  data: [Guild_insert_input!]!
  on_conflict: Guild_on_conflict
}

"""
Boolean expression to filter rows from the table "Guild". All fields are combined with a logical 'AND'.
"""
input Guild_bool_exp {
  Guild_Members: Guild_Member_bool_exp
  _and: [Guild_bool_exp]
  _not: Guild_bool_exp
  _or: [Guild_bool_exp]
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "Guild"
"""
enum Guild_constraint {
  """unique or primary key constraint"""
  Guild_pkey
}

"""
input type for inserting data into table "Guild"
"""
input Guild_insert_input {
  Guild_Members: Guild_Member_arr_rel_insert_input
  id: uuid
  name: String
}

"""aggregate max on columns"""
type Guild_max_fields {
  id: uuid
  name: String
}

"""
order by max() on columns of table "Guild"
"""
input Guild_max_order_by {
  id: order_by
  name: order_by
}

"""
columns and relationships of "Guild_Member"
"""
type Guild_Member {
  """An object relationship"""
  Guild: Guild!

  """An object relationship"""
  Player: Player!
  guild_id: uuid!
  player_id: uuid!
}

"""
aggregated selection of "Guild_Member"
"""
type Guild_Member_aggregate {
  aggregate: Guild_Member_aggregate_fields
  nodes: [Guild_Member!]!
}

"""
aggregate fields of "Guild_Member"
"""
type Guild_Member_aggregate_fields {
  count(columns: [Guild_Member_select_column!], distinct: Boolean): Int
  max: Guild_Member_max_fields
  min: Guild_Member_min_fields
}

"""
order by aggregate values of table "Guild_Member"
"""
input Guild_Member_aggregate_order_by {
  count: order_by
  max: Guild_Member_max_order_by
  min: Guild_Member_min_order_by
}

"""
input type for inserting array relation for remote table "Guild_Member"
"""
input Guild_Member_arr_rel_insert_input {
  data: [Guild_Member_insert_input!]!
  on_conflict: Guild_Member_on_conflict
}

"""
Boolean expression to filter rows from the table "Guild_Member". All fields are combined with a logical 'AND'.
"""
input Guild_Member_bool_exp {
  Guild: Guild_bool_exp
  Player: Player_bool_exp
  _and: [Guild_Member_bool_exp]
  _not: Guild_Member_bool_exp
  _or: [Guild_Member_bool_exp]
  guild_id: uuid_comparison_exp
  player_id: uuid_comparison_exp
}

"""
unique or primary key constraints on table "Guild_Member"
"""
enum Guild_Member_constraint {
  """unique or primary key constraint"""
  Guild_Member_pkey
}

"""
input type for inserting data into table "Guild_Member"
"""
input Guild_Member_insert_input {
  Guild: Guild_obj_rel_insert_input
  Player: Player_obj_rel_insert_input
  guild_id: uuid
  player_id: uuid
}

"""aggregate max on columns"""
type Guild_Member_max_fields {
  guild_id: uuid
  player_id: uuid
}

"""
order by max() on columns of table "Guild_Member"
"""
input Guild_Member_max_order_by {
  guild_id: order_by
  player_id: order_by
}

"""aggregate min on columns"""
type Guild_Member_min_fields {
  guild_id: uuid
  player_id: uuid
}

"""
order by min() on columns of table "Guild_Member"
"""
input Guild_Member_min_order_by {
  guild_id: order_by
  player_id: order_by
}

"""
response of any mutation on the table "Guild_Member"
"""
type Guild_Member_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Guild_Member!]!
}

"""
input type for inserting object relation for remote table "Guild_Member"
"""
input Guild_Member_obj_rel_insert_input {
  data: Guild_Member_insert_input!
  on_conflict: Guild_Member_on_conflict
}

"""
on conflict condition type for table "Guild_Member"
"""
input Guild_Member_on_conflict {
  constraint: Guild_Member_constraint!
  update_columns: [Guild_Member_update_column!]!
  where: Guild_Member_bool_exp
}

"""
ordering options when selecting data from "Guild_Member"
"""
input Guild_Member_order_by {
  Guild: Guild_order_by
  Player: Player_order_by
  guild_id: order_by
  player_id: order_by
}

"""
primary key columns input for table: "Guild_Member"
"""
input Guild_Member_pk_columns_input {
  guild_id: uuid!
  player_id: uuid!
}

"""
select columns of table "Guild_Member"
"""
enum Guild_Member_select_column {
  """column name"""
  guild_id

  """column name"""
  player_id
}

"""
input type for updating data in table "Guild_Member"
"""
input Guild_Member_set_input {
  guild_id: uuid
  player_id: uuid
}

"""
update columns of table "Guild_Member"
"""
enum Guild_Member_update_column {
  """column name"""
  guild_id

  """column name"""
  player_id
}

"""aggregate min on columns"""
type Guild_min_fields {
  id: uuid
  name: String
}

"""
order by min() on columns of table "Guild"
"""
input Guild_min_order_by {
  id: order_by
  name: order_by
}

"""
response of any mutation on the table "Guild"
"""
type Guild_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Guild!]!
}

"""
input type for inserting object relation for remote table "Guild"
"""
input Guild_obj_rel_insert_input {
  data: Guild_insert_input!
  on_conflict: Guild_on_conflict
}

"""
on conflict condition type for table "Guild"
"""
input Guild_on_conflict {
  constraint: Guild_constraint!
  update_columns: [Guild_update_column!]!
  where: Guild_bool_exp
}

"""
ordering options when selecting data from "Guild"
"""
input Guild_order_by {
  Guild_Members_aggregate: Guild_Member_aggregate_order_by
  id: order_by
  name: order_by
}

"""
primary key columns input for table: "Guild"
"""
input Guild_pk_columns_input {
  id: uuid!
}

"""
select columns of table "Guild"
"""
enum Guild_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "Guild"
"""
input Guild_set_input {
  id: uuid
  name: String
}

"""
update columns of table "Guild"
"""
enum Guild_update_column {
  """column name"""
  id

  """column name"""
  name
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

scalar json

"""
expression to compare columns of type json. All fields are combined with logical 'AND'.
"""
input json_comparison_exp {
  _eq: json
  _gt: json
  _gte: json
  _in: [json!]
  _is_null: Boolean
  _lt: json
  _lte: json
  _neq: json
  _nin: [json!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "Account"
  """
  delete_Account(
    """filter the rows which have to be deleted"""
    where: Account_bool_exp!
  ): Account_mutation_response

  """
  delete single row from the table: "Account"
  """
  delete_Account_by_pk(identifier: String!): Account

  """
  delete data from the table: "Guild"
  """
  delete_Guild(
    """filter the rows which have to be deleted"""
    where: Guild_bool_exp!
  ): Guild_mutation_response

  """
  delete data from the table: "Guild_Member"
  """
  delete_Guild_Member(
    """filter the rows which have to be deleted"""
    where: Guild_Member_bool_exp!
  ): Guild_Member_mutation_response

  """
  delete single row from the table: "Guild_Member"
  """
  delete_Guild_Member_by_pk(guild_id: uuid!, player_id: uuid!): Guild_Member

  """
  delete single row from the table: "Guild"
  """
  delete_Guild_by_pk(id: uuid!): Guild

  """
  delete data from the table: "Player"
  """
  delete_Player(
    """filter the rows which have to be deleted"""
    where: Player_bool_exp!
  ): Player_mutation_response

  """
  delete single row from the table: "Player"
  """
  delete_Player_by_pk(id: uuid!): Player

  """
  delete data from the table: "Quest"
  """
  delete_Quest(
    """filter the rows which have to be deleted"""
    where: Quest_bool_exp!
  ): Quest_mutation_response

  """
  delete data from the table: "Quest_Completed"
  """
  delete_Quest_Completed(
    """filter the rows which have to be deleted"""
    where: Quest_Completed_bool_exp!
  ): Quest_Completed_mutation_response

  """
  delete single row from the table: "Quest_Completed"
  """
  delete_Quest_Completed_by_pk(player_id: uuid!, quest_id: uuid!): Quest_Completed

  """
  delete single row from the table: "Quest"
  """
  delete_Quest_by_pk(id: uuid!): Quest

  """
  delete data from the table: "XPInterval"
  """
  delete_XPInterval(
    """filter the rows which have to be deleted"""
    where: XPInterval_bool_exp!
  ): XPInterval_mutation_response

  """
  delete data from the table: "caca"
  """
  delete_caca(
    """filter the rows which have to be deleted"""
    where: caca_bool_exp!
  ): caca_mutation_response

  """
  delete single row from the table: "caca"
  """
  delete_caca_by_pk(id: Int!): caca

  """
  delete data from the table: "popo"
  """
  delete_popo(
    """filter the rows which have to be deleted"""
    where: popo_bool_exp!
  ): popo_mutation_response

  """
  delete single row from the table: "popo"
  """
  delete_popo_by_pk(id: uuid!): popo

  """
  insert data into the table: "Account"
  """
  insert_Account(
    """the rows to be inserted"""
    objects: [Account_insert_input!]!

    """on conflict condition"""
    on_conflict: Account_on_conflict
  ): Account_mutation_response

  """
  insert a single row into the table: "Account"
  """
  insert_Account_one(
    """the row to be inserted"""
    object: Account_insert_input!

    """on conflict condition"""
    on_conflict: Account_on_conflict
  ): Account

  """
  insert data into the table: "Guild"
  """
  insert_Guild(
    """the rows to be inserted"""
    objects: [Guild_insert_input!]!

    """on conflict condition"""
    on_conflict: Guild_on_conflict
  ): Guild_mutation_response

  """
  insert data into the table: "Guild_Member"
  """
  insert_Guild_Member(
    """the rows to be inserted"""
    objects: [Guild_Member_insert_input!]!

    """on conflict condition"""
    on_conflict: Guild_Member_on_conflict
  ): Guild_Member_mutation_response

  """
  insert a single row into the table: "Guild_Member"
  """
  insert_Guild_Member_one(
    """the row to be inserted"""
    object: Guild_Member_insert_input!

    """on conflict condition"""
    on_conflict: Guild_Member_on_conflict
  ): Guild_Member

  """
  insert a single row into the table: "Guild"
  """
  insert_Guild_one(
    """the row to be inserted"""
    object: Guild_insert_input!

    """on conflict condition"""
    on_conflict: Guild_on_conflict
  ): Guild

  """
  insert data into the table: "Player"
  """
  insert_Player(
    """the rows to be inserted"""
    objects: [Player_insert_input!]!

    """on conflict condition"""
    on_conflict: Player_on_conflict
  ): Player_mutation_response

  """
  insert a single row into the table: "Player"
  """
  insert_Player_one(
    """the row to be inserted"""
    object: Player_insert_input!

    """on conflict condition"""
    on_conflict: Player_on_conflict
  ): Player

  """
  insert data into the table: "Quest"
  """
  insert_Quest(
    """the rows to be inserted"""
    objects: [Quest_insert_input!]!

    """on conflict condition"""
    on_conflict: Quest_on_conflict
  ): Quest_mutation_response

  """
  insert data into the table: "Quest_Completed"
  """
  insert_Quest_Completed(
    """the rows to be inserted"""
    objects: [Quest_Completed_insert_input!]!

    """on conflict condition"""
    on_conflict: Quest_Completed_on_conflict
  ): Quest_Completed_mutation_response

  """
  insert a single row into the table: "Quest_Completed"
  """
  insert_Quest_Completed_one(
    """the row to be inserted"""
    object: Quest_Completed_insert_input!

    """on conflict condition"""
    on_conflict: Quest_Completed_on_conflict
  ): Quest_Completed

  """
  insert a single row into the table: "Quest"
  """
  insert_Quest_one(
    """the row to be inserted"""
    object: Quest_insert_input!

    """on conflict condition"""
    on_conflict: Quest_on_conflict
  ): Quest

  """
  insert data into the table: "XPInterval"
  """
  insert_XPInterval(
    """the rows to be inserted"""
    objects: [XPInterval_insert_input!]!
  ): XPInterval_mutation_response

  """
  insert a single row into the table: "XPInterval"
  """
  insert_XPInterval_one(
    """the row to be inserted"""
    object: XPInterval_insert_input!
  ): XPInterval

  """
  insert data into the table: "caca"
  """
  insert_caca(
    """the rows to be inserted"""
    objects: [caca_insert_input!]!

    """on conflict condition"""
    on_conflict: caca_on_conflict
  ): caca_mutation_response

  """
  insert a single row into the table: "caca"
  """
  insert_caca_one(
    """the row to be inserted"""
    object: caca_insert_input!

    """on conflict condition"""
    on_conflict: caca_on_conflict
  ): caca

  """
  insert data into the table: "popo"
  """
  insert_popo(
    """the rows to be inserted"""
    objects: [popo_insert_input!]!

    """on conflict condition"""
    on_conflict: popo_on_conflict
  ): popo_mutation_response

  """
  insert a single row into the table: "popo"
  """
  insert_popo_one(
    """the row to be inserted"""
    object: popo_insert_input!

    """on conflict condition"""
    on_conflict: popo_on_conflict
  ): popo

  """
  update data of the table: "Account"
  """
  update_Account(
    """sets the columns of the filtered rows to the given values"""
    _set: Account_set_input

    """filter the rows which have to be updated"""
    where: Account_bool_exp!
  ): Account_mutation_response

  """
  update single row of the table: "Account"
  """
  update_Account_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: Account_set_input
    pk_columns: Account_pk_columns_input!
  ): Account

  """
  update data of the table: "Guild"
  """
  update_Guild(
    """sets the columns of the filtered rows to the given values"""
    _set: Guild_set_input

    """filter the rows which have to be updated"""
    where: Guild_bool_exp!
  ): Guild_mutation_response

  """
  update data of the table: "Guild_Member"
  """
  update_Guild_Member(
    """sets the columns of the filtered rows to the given values"""
    _set: Guild_Member_set_input

    """filter the rows which have to be updated"""
    where: Guild_Member_bool_exp!
  ): Guild_Member_mutation_response

  """
  update single row of the table: "Guild_Member"
  """
  update_Guild_Member_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: Guild_Member_set_input
    pk_columns: Guild_Member_pk_columns_input!
  ): Guild_Member

  """
  update single row of the table: "Guild"
  """
  update_Guild_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: Guild_set_input
    pk_columns: Guild_pk_columns_input!
  ): Guild

  """
  update data of the table: "Player"
  """
  update_Player(
    """increments the integer columns with given value of the filtered values"""
    _inc: Player_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Player_set_input

    """filter the rows which have to be updated"""
    where: Player_bool_exp!
  ): Player_mutation_response

  """
  update single row of the table: "Player"
  """
  update_Player_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: Player_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Player_set_input
    pk_columns: Player_pk_columns_input!
  ): Player

  """
  update data of the table: "Quest"
  """
  update_Quest(
    """increments the integer columns with given value of the filtered values"""
    _inc: Quest_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Quest_set_input

    """filter the rows which have to be updated"""
    where: Quest_bool_exp!
  ): Quest_mutation_response

  """
  update data of the table: "Quest_Completed"
  """
  update_Quest_Completed(
    """sets the columns of the filtered rows to the given values"""
    _set: Quest_Completed_set_input

    """filter the rows which have to be updated"""
    where: Quest_Completed_bool_exp!
  ): Quest_Completed_mutation_response

  """
  update single row of the table: "Quest_Completed"
  """
  update_Quest_Completed_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: Quest_Completed_set_input
    pk_columns: Quest_Completed_pk_columns_input!
  ): Quest_Completed

  """
  update single row of the table: "Quest"
  """
  update_Quest_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: Quest_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: Quest_set_input
    pk_columns: Quest_pk_columns_input!
  ): Quest

  """
  update data of the table: "XPInterval"
  """
  update_XPInterval(
    """increments the integer columns with given value of the filtered values"""
    _inc: XPInterval_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: XPInterval_set_input

    """filter the rows which have to be updated"""
    where: XPInterval_bool_exp!
  ): XPInterval_mutation_response

  """
  update data of the table: "caca"
  """
  update_caca(
    """increments the integer columns with given value of the filtered values"""
    _inc: caca_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: caca_set_input

    """filter the rows which have to be updated"""
    where: caca_bool_exp!
  ): caca_mutation_response

  """
  update single row of the table: "caca"
  """
  update_caca_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: caca_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: caca_set_input
    pk_columns: caca_pk_columns_input!
  ): caca

  """
  update data of the table: "popo"
  """
  update_popo(
    """sets the columns of the filtered rows to the given values"""
    _set: popo_set_input

    """filter the rows which have to be updated"""
    where: popo_bool_exp!
  ): popo_mutation_response

  """
  update single row of the table: "popo"
  """
  update_popo_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: popo_set_input
    pk_columns: popo_pk_columns_input!
  ): popo
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "Player"
"""
type Player {
  """An array relationship"""
  Accounts(
    """distinct select on columns"""
    distinct_on: [Account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Account_order_by!]

    """filter the rows returned"""
    where: Account_bool_exp
  ): [Account!]!

  """An aggregated array relationship"""
  Accounts_aggregate(
    """distinct select on columns"""
    distinct_on: [Account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Account_order_by!]

    """filter the rows returned"""
    where: Account_bool_exp
  ): Account_aggregate!

  """An array relationship"""
  Guild_Members(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): [Guild_Member!]!

  """An aggregated array relationship"""
  Guild_Members_aggregate(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): Guild_Member_aggregate!

  """An array relationship"""
  Quest_Completeds(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): [Quest_Completed!]!

  """An aggregated array relationship"""
  Quest_Completeds_aggregate(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): Quest_Completed_aggregate!

  """An array relationship"""
  XPIntervals(
    """distinct select on columns"""
    distinct_on: [XPInterval_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [XPInterval_order_by!]

    """filter the rows returned"""
    where: XPInterval_bool_exp
  ): [XPInterval!]!

  """An aggregated array relationship"""
  XPIntervals_aggregate(
    """distinct select on columns"""
    distinct_on: [XPInterval_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [XPInterval_order_by!]

    """filter the rows returned"""
    where: XPInterval_bool_exp
  ): XPInterval_aggregate!
  id: uuid!
  links(
    """JSON select path"""
    path: String
  ): json
  rank: player_rank!
  sentences(
    """JSON select path"""
    path: String
  ): json
  totalXp: numeric
}

"""
aggregated selection of "Player"
"""
type Player_aggregate {
  aggregate: Player_aggregate_fields
  nodes: [Player!]!
}

"""
aggregate fields of "Player"
"""
type Player_aggregate_fields {
  avg: Player_avg_fields
  count(columns: [Player_select_column!], distinct: Boolean): Int
  max: Player_max_fields
  min: Player_min_fields
  stddev: Player_stddev_fields
  stddev_pop: Player_stddev_pop_fields
  stddev_samp: Player_stddev_samp_fields
  sum: Player_sum_fields
  var_pop: Player_var_pop_fields
  var_samp: Player_var_samp_fields
  variance: Player_variance_fields
}

"""
order by aggregate values of table "Player"
"""
input Player_aggregate_order_by {
  avg: Player_avg_order_by
  count: order_by
  max: Player_max_order_by
  min: Player_min_order_by
  stddev: Player_stddev_order_by
  stddev_pop: Player_stddev_pop_order_by
  stddev_samp: Player_stddev_samp_order_by
  sum: Player_sum_order_by
  var_pop: Player_var_pop_order_by
  var_samp: Player_var_samp_order_by
  variance: Player_variance_order_by
}

"""
input type for inserting array relation for remote table "Player"
"""
input Player_arr_rel_insert_input {
  data: [Player_insert_input!]!
  on_conflict: Player_on_conflict
}

"""aggregate avg on columns"""
type Player_avg_fields {
  totalXp: Float
}

"""
order by avg() on columns of table "Player"
"""
input Player_avg_order_by {
  totalXp: order_by
}

"""
Boolean expression to filter rows from the table "Player". All fields are combined with a logical 'AND'.
"""
input Player_bool_exp {
  Accounts: Account_bool_exp
  Guild_Members: Guild_Member_bool_exp
  Quest_Completeds: Quest_Completed_bool_exp
  XPIntervals: XPInterval_bool_exp
  _and: [Player_bool_exp]
  _not: Player_bool_exp
  _or: [Player_bool_exp]
  id: uuid_comparison_exp
  links: json_comparison_exp
  rank: player_rank_comparison_exp
  sentences: json_comparison_exp
  totalXp: numeric_comparison_exp
}

"""
unique or primary key constraints on table "Player"
"""
enum Player_constraint {
  """unique or primary key constraint"""
  Player_pkey
}

"""
input type for incrementing integer column in table "Player"
"""
input Player_inc_input {
  totalXp: numeric
}

"""
input type for inserting data into table "Player"
"""
input Player_insert_input {
  Accounts: Account_arr_rel_insert_input
  Guild_Members: Guild_Member_arr_rel_insert_input
  Quest_Completeds: Quest_Completed_arr_rel_insert_input
  XPIntervals: XPInterval_arr_rel_insert_input
  id: uuid
  links: json
  rank: player_rank
  sentences: json
  totalXp: numeric
}

"""aggregate max on columns"""
type Player_max_fields {
  id: uuid
  totalXp: numeric
}

"""
order by max() on columns of table "Player"
"""
input Player_max_order_by {
  id: order_by
  totalXp: order_by
}

"""aggregate min on columns"""
type Player_min_fields {
  id: uuid
  totalXp: numeric
}

"""
order by min() on columns of table "Player"
"""
input Player_min_order_by {
  id: order_by
  totalXp: order_by
}

"""
response of any mutation on the table "Player"
"""
type Player_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Player!]!
}

"""
input type for inserting object relation for remote table "Player"
"""
input Player_obj_rel_insert_input {
  data: Player_insert_input!
  on_conflict: Player_on_conflict
}

"""
on conflict condition type for table "Player"
"""
input Player_on_conflict {
  constraint: Player_constraint!
  update_columns: [Player_update_column!]!
  where: Player_bool_exp
}

"""
ordering options when selecting data from "Player"
"""
input Player_order_by {
  Accounts_aggregate: Account_aggregate_order_by
  Guild_Members_aggregate: Guild_Member_aggregate_order_by
  Quest_Completeds_aggregate: Quest_Completed_aggregate_order_by
  XPIntervals_aggregate: XPInterval_aggregate_order_by
  id: order_by
  links: order_by
  rank: order_by
  sentences: order_by
  totalXp: order_by
}

"""
primary key columns input for table: "Player"
"""
input Player_pk_columns_input {
  id: uuid!
}

scalar player_rank

"""
expression to compare columns of type player_rank. All fields are combined with logical 'AND'.
"""
input player_rank_comparison_exp {
  _eq: player_rank
  _gt: player_rank
  _gte: player_rank
  _in: [player_rank!]
  _is_null: Boolean
  _lt: player_rank
  _lte: player_rank
  _neq: player_rank
  _nin: [player_rank!]
}

"""
select columns of table "Player"
"""
enum Player_select_column {
  """column name"""
  id

  """column name"""
  links

  """column name"""
  rank

  """column name"""
  sentences

  """column name"""
  totalXp
}

"""
input type for updating data in table "Player"
"""
input Player_set_input {
  id: uuid
  links: json
  rank: player_rank
  sentences: json
  totalXp: numeric
}

"""aggregate stddev on columns"""
type Player_stddev_fields {
  totalXp: Float
}

"""
order by stddev() on columns of table "Player"
"""
input Player_stddev_order_by {
  totalXp: order_by
}

"""aggregate stddev_pop on columns"""
type Player_stddev_pop_fields {
  totalXp: Float
}

"""
order by stddev_pop() on columns of table "Player"
"""
input Player_stddev_pop_order_by {
  totalXp: order_by
}

"""aggregate stddev_samp on columns"""
type Player_stddev_samp_fields {
  totalXp: Float
}

"""
order by stddev_samp() on columns of table "Player"
"""
input Player_stddev_samp_order_by {
  totalXp: order_by
}

"""aggregate sum on columns"""
type Player_sum_fields {
  totalXp: numeric
}

"""
order by sum() on columns of table "Player"
"""
input Player_sum_order_by {
  totalXp: order_by
}

"""
update columns of table "Player"
"""
enum Player_update_column {
  """column name"""
  id

  """column name"""
  links

  """column name"""
  rank

  """column name"""
  sentences

  """column name"""
  totalXp
}

"""aggregate var_pop on columns"""
type Player_var_pop_fields {
  totalXp: Float
}

"""
order by var_pop() on columns of table "Player"
"""
input Player_var_pop_order_by {
  totalXp: order_by
}

"""aggregate var_samp on columns"""
type Player_var_samp_fields {
  totalXp: Float
}

"""
order by var_samp() on columns of table "Player"
"""
input Player_var_samp_order_by {
  totalXp: order_by
}

"""aggregate variance on columns"""
type Player_variance_fields {
  totalXp: Float
}

"""
order by variance() on columns of table "Player"
"""
input Player_variance_order_by {
  totalXp: order_by
}

"""
columns and relationships of "popo"
"""
type popo {
  id: uuid!
  sentences(
    """JSON select path"""
    path: String
  ): json
}

"""
aggregated selection of "popo"
"""
type popo_aggregate {
  aggregate: popo_aggregate_fields
  nodes: [popo!]!
}

"""
aggregate fields of "popo"
"""
type popo_aggregate_fields {
  count(columns: [popo_select_column!], distinct: Boolean): Int
  max: popo_max_fields
  min: popo_min_fields
}

"""
order by aggregate values of table "popo"
"""
input popo_aggregate_order_by {
  count: order_by
  max: popo_max_order_by
  min: popo_min_order_by
}

"""
input type for inserting array relation for remote table "popo"
"""
input popo_arr_rel_insert_input {
  data: [popo_insert_input!]!
  on_conflict: popo_on_conflict
}

"""
Boolean expression to filter rows from the table "popo". All fields are combined with a logical 'AND'.
"""
input popo_bool_exp {
  _and: [popo_bool_exp]
  _not: popo_bool_exp
  _or: [popo_bool_exp]
  id: uuid_comparison_exp
  sentences: json_comparison_exp
}

"""
unique or primary key constraints on table "popo"
"""
enum popo_constraint {
  """unique or primary key constraint"""
  popo_pkey
}

"""
input type for inserting data into table "popo"
"""
input popo_insert_input {
  id: uuid
  sentences: json
}

"""aggregate max on columns"""
type popo_max_fields {
  id: uuid
}

"""
order by max() on columns of table "popo"
"""
input popo_max_order_by {
  id: order_by
}

"""aggregate min on columns"""
type popo_min_fields {
  id: uuid
}

"""
order by min() on columns of table "popo"
"""
input popo_min_order_by {
  id: order_by
}

"""
response of any mutation on the table "popo"
"""
type popo_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [popo!]!
}

"""
input type for inserting object relation for remote table "popo"
"""
input popo_obj_rel_insert_input {
  data: popo_insert_input!
  on_conflict: popo_on_conflict
}

"""
on conflict condition type for table "popo"
"""
input popo_on_conflict {
  constraint: popo_constraint!
  update_columns: [popo_update_column!]!
  where: popo_bool_exp
}

"""
ordering options when selecting data from "popo"
"""
input popo_order_by {
  id: order_by
  sentences: order_by
}

"""
primary key columns input for table: "popo"
"""
input popo_pk_columns_input {
  id: uuid!
}

"""
select columns of table "popo"
"""
enum popo_select_column {
  """column name"""
  id

  """column name"""
  sentences
}

"""
input type for updating data in table "popo"
"""
input popo_set_input {
  id: uuid
  sentences: json
}

"""
update columns of table "popo"
"""
enum popo_update_column {
  """column name"""
  id

  """column name"""
  sentences
}

scalar profile_type

"""
expression to compare columns of type profile_type. All fields are combined with logical 'AND'.
"""
input profile_type_comparison_exp {
  _eq: profile_type
  _gt: profile_type
  _gte: profile_type
  _in: [profile_type!]
  _is_null: Boolean
  _lt: profile_type
  _lte: profile_type
  _neq: profile_type
  _nin: [profile_type!]
}

"""query root"""
type query_root {
  """
  fetch data from the table: "Account"
  """
  Account(
    """distinct select on columns"""
    distinct_on: [Account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Account_order_by!]

    """filter the rows returned"""
    where: Account_bool_exp
  ): [Account!]!

  """
  fetch aggregated fields from the table: "Account"
  """
  Account_aggregate(
    """distinct select on columns"""
    distinct_on: [Account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Account_order_by!]

    """filter the rows returned"""
    where: Account_bool_exp
  ): Account_aggregate!

  """fetch data from the table: "Account" using primary key columns"""
  Account_by_pk(identifier: String!): Account

  """
  fetch data from the table: "Guild"
  """
  Guild(
    """distinct select on columns"""
    distinct_on: [Guild_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_order_by!]

    """filter the rows returned"""
    where: Guild_bool_exp
  ): [Guild!]!

  """
  fetch data from the table: "Guild_Member"
  """
  Guild_Member(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): [Guild_Member!]!

  """
  fetch aggregated fields from the table: "Guild_Member"
  """
  Guild_Member_aggregate(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): Guild_Member_aggregate!

  """fetch data from the table: "Guild_Member" using primary key columns"""
  Guild_Member_by_pk(guild_id: uuid!, player_id: uuid!): Guild_Member

  """
  fetch aggregated fields from the table: "Guild"
  """
  Guild_aggregate(
    """distinct select on columns"""
    distinct_on: [Guild_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_order_by!]

    """filter the rows returned"""
    where: Guild_bool_exp
  ): Guild_aggregate!

  """fetch data from the table: "Guild" using primary key columns"""
  Guild_by_pk(id: uuid!): Guild

  """
  fetch data from the table: "Player"
  """
  Player(
    """distinct select on columns"""
    distinct_on: [Player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Player_order_by!]

    """filter the rows returned"""
    where: Player_bool_exp
  ): [Player!]!

  """
  fetch aggregated fields from the table: "Player"
  """
  Player_aggregate(
    """distinct select on columns"""
    distinct_on: [Player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Player_order_by!]

    """filter the rows returned"""
    where: Player_bool_exp
  ): Player_aggregate!

  """fetch data from the table: "Player" using primary key columns"""
  Player_by_pk(id: uuid!): Player

  """
  fetch data from the table: "Quest"
  """
  Quest(
    """distinct select on columns"""
    distinct_on: [Quest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_order_by!]

    """filter the rows returned"""
    where: Quest_bool_exp
  ): [Quest!]!

  """
  fetch data from the table: "Quest_Completed"
  """
  Quest_Completed(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): [Quest_Completed!]!

  """
  fetch aggregated fields from the table: "Quest_Completed"
  """
  Quest_Completed_aggregate(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): Quest_Completed_aggregate!

  """fetch data from the table: "Quest_Completed" using primary key columns"""
  Quest_Completed_by_pk(player_id: uuid!, quest_id: uuid!): Quest_Completed

  """
  fetch aggregated fields from the table: "Quest"
  """
  Quest_aggregate(
    """distinct select on columns"""
    distinct_on: [Quest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_order_by!]

    """filter the rows returned"""
    where: Quest_bool_exp
  ): Quest_aggregate!

  """fetch data from the table: "Quest" using primary key columns"""
  Quest_by_pk(id: uuid!): Quest

  """
  fetch data from the table: "XPInterval"
  """
  XPInterval(
    """distinct select on columns"""
    distinct_on: [XPInterval_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [XPInterval_order_by!]

    """filter the rows returned"""
    where: XPInterval_bool_exp
  ): [XPInterval!]!

  """
  fetch aggregated fields from the table: "XPInterval"
  """
  XPInterval_aggregate(
    """distinct select on columns"""
    distinct_on: [XPInterval_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [XPInterval_order_by!]

    """filter the rows returned"""
    where: XPInterval_bool_exp
  ): XPInterval_aggregate!

  """
  fetch data from the table: "caca"
  """
  caca(
    """distinct select on columns"""
    distinct_on: [caca_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [caca_order_by!]

    """filter the rows returned"""
    where: caca_bool_exp
  ): [caca!]!

  """
  fetch aggregated fields from the table: "caca"
  """
  caca_aggregate(
    """distinct select on columns"""
    distinct_on: [caca_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [caca_order_by!]

    """filter the rows returned"""
    where: caca_bool_exp
  ): caca_aggregate!

  """fetch data from the table: "caca" using primary key columns"""
  caca_by_pk(id: Int!): caca

  """
  fetch data from the table: "popo"
  """
  popo(
    """distinct select on columns"""
    distinct_on: [popo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [popo_order_by!]

    """filter the rows returned"""
    where: popo_bool_exp
  ): [popo!]!

  """
  fetch aggregated fields from the table: "popo"
  """
  popo_aggregate(
    """distinct select on columns"""
    distinct_on: [popo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [popo_order_by!]

    """filter the rows returned"""
    where: popo_bool_exp
  ): popo_aggregate!

  """fetch data from the table: "popo" using primary key columns"""
  popo_by_pk(id: uuid!): popo
}

"""
columns and relationships of "Quest"
"""
type Quest {
  """An array relationship"""
  Quest_Completeds(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): [Quest_Completed!]!

  """An aggregated array relationship"""
  Quest_Completeds_aggregate(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): Quest_Completed_aggregate!
  description: String
  id: uuid!
  name: String!
  url: String!
  xp: numeric!
}

"""
aggregated selection of "Quest"
"""
type Quest_aggregate {
  aggregate: Quest_aggregate_fields
  nodes: [Quest!]!
}

"""
aggregate fields of "Quest"
"""
type Quest_aggregate_fields {
  avg: Quest_avg_fields
  count(columns: [Quest_select_column!], distinct: Boolean): Int
  max: Quest_max_fields
  min: Quest_min_fields
  stddev: Quest_stddev_fields
  stddev_pop: Quest_stddev_pop_fields
  stddev_samp: Quest_stddev_samp_fields
  sum: Quest_sum_fields
  var_pop: Quest_var_pop_fields
  var_samp: Quest_var_samp_fields
  variance: Quest_variance_fields
}

"""
order by aggregate values of table "Quest"
"""
input Quest_aggregate_order_by {
  avg: Quest_avg_order_by
  count: order_by
  max: Quest_max_order_by
  min: Quest_min_order_by
  stddev: Quest_stddev_order_by
  stddev_pop: Quest_stddev_pop_order_by
  stddev_samp: Quest_stddev_samp_order_by
  sum: Quest_sum_order_by
  var_pop: Quest_var_pop_order_by
  var_samp: Quest_var_samp_order_by
  variance: Quest_variance_order_by
}

"""
input type for inserting array relation for remote table "Quest"
"""
input Quest_arr_rel_insert_input {
  data: [Quest_insert_input!]!
  on_conflict: Quest_on_conflict
}

"""aggregate avg on columns"""
type Quest_avg_fields {
  xp: Float
}

"""
order by avg() on columns of table "Quest"
"""
input Quest_avg_order_by {
  xp: order_by
}

"""
Boolean expression to filter rows from the table "Quest". All fields are combined with a logical 'AND'.
"""
input Quest_bool_exp {
  Quest_Completeds: Quest_Completed_bool_exp
  _and: [Quest_bool_exp]
  _not: Quest_bool_exp
  _or: [Quest_bool_exp]
  description: String_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  url: String_comparison_exp
  xp: numeric_comparison_exp
}

"""
columns and relationships of "Quest_Completed"
"""
type Quest_Completed {
  """An object relationship"""
  Player: Player!

  """An object relationship"""
  Quest: Quest!
  player_id: uuid!
  quest_id: uuid!
  time: timestamp
}

"""
aggregated selection of "Quest_Completed"
"""
type Quest_Completed_aggregate {
  aggregate: Quest_Completed_aggregate_fields
  nodes: [Quest_Completed!]!
}

"""
aggregate fields of "Quest_Completed"
"""
type Quest_Completed_aggregate_fields {
  count(columns: [Quest_Completed_select_column!], distinct: Boolean): Int
  max: Quest_Completed_max_fields
  min: Quest_Completed_min_fields
}

"""
order by aggregate values of table "Quest_Completed"
"""
input Quest_Completed_aggregate_order_by {
  count: order_by
  max: Quest_Completed_max_order_by
  min: Quest_Completed_min_order_by
}

"""
input type for inserting array relation for remote table "Quest_Completed"
"""
input Quest_Completed_arr_rel_insert_input {
  data: [Quest_Completed_insert_input!]!
  on_conflict: Quest_Completed_on_conflict
}

"""
Boolean expression to filter rows from the table "Quest_Completed". All fields are combined with a logical 'AND'.
"""
input Quest_Completed_bool_exp {
  Player: Player_bool_exp
  Quest: Quest_bool_exp
  _and: [Quest_Completed_bool_exp]
  _not: Quest_Completed_bool_exp
  _or: [Quest_Completed_bool_exp]
  player_id: uuid_comparison_exp
  quest_id: uuid_comparison_exp
  time: timestamp_comparison_exp
}

"""
unique or primary key constraints on table "Quest_Completed"
"""
enum Quest_Completed_constraint {
  """unique or primary key constraint"""
  Quest_Completed_pkey
}

"""
input type for inserting data into table "Quest_Completed"
"""
input Quest_Completed_insert_input {
  Player: Player_obj_rel_insert_input
  Quest: Quest_obj_rel_insert_input
  player_id: uuid
  quest_id: uuid
  time: timestamp
}

"""aggregate max on columns"""
type Quest_Completed_max_fields {
  player_id: uuid
  quest_id: uuid
  time: timestamp
}

"""
order by max() on columns of table "Quest_Completed"
"""
input Quest_Completed_max_order_by {
  player_id: order_by
  quest_id: order_by
  time: order_by
}

"""aggregate min on columns"""
type Quest_Completed_min_fields {
  player_id: uuid
  quest_id: uuid
  time: timestamp
}

"""
order by min() on columns of table "Quest_Completed"
"""
input Quest_Completed_min_order_by {
  player_id: order_by
  quest_id: order_by
  time: order_by
}

"""
response of any mutation on the table "Quest_Completed"
"""
type Quest_Completed_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Quest_Completed!]!
}

"""
input type for inserting object relation for remote table "Quest_Completed"
"""
input Quest_Completed_obj_rel_insert_input {
  data: Quest_Completed_insert_input!
  on_conflict: Quest_Completed_on_conflict
}

"""
on conflict condition type for table "Quest_Completed"
"""
input Quest_Completed_on_conflict {
  constraint: Quest_Completed_constraint!
  update_columns: [Quest_Completed_update_column!]!
  where: Quest_Completed_bool_exp
}

"""
ordering options when selecting data from "Quest_Completed"
"""
input Quest_Completed_order_by {
  Player: Player_order_by
  Quest: Quest_order_by
  player_id: order_by
  quest_id: order_by
  time: order_by
}

"""
primary key columns input for table: "Quest_Completed"
"""
input Quest_Completed_pk_columns_input {
  player_id: uuid!
  quest_id: uuid!
}

"""
select columns of table "Quest_Completed"
"""
enum Quest_Completed_select_column {
  """column name"""
  player_id

  """column name"""
  quest_id

  """column name"""
  time
}

"""
input type for updating data in table "Quest_Completed"
"""
input Quest_Completed_set_input {
  player_id: uuid
  quest_id: uuid
  time: timestamp
}

"""
update columns of table "Quest_Completed"
"""
enum Quest_Completed_update_column {
  """column name"""
  player_id

  """column name"""
  quest_id

  """column name"""
  time
}

"""
unique or primary key constraints on table "Quest"
"""
enum Quest_constraint {
  """unique or primary key constraint"""
  Quest_pkey
}

"""
input type for incrementing integer column in table "Quest"
"""
input Quest_inc_input {
  xp: numeric
}

"""
input type for inserting data into table "Quest"
"""
input Quest_insert_input {
  Quest_Completeds: Quest_Completed_arr_rel_insert_input
  description: String
  id: uuid
  name: String
  url: String
  xp: numeric
}

"""aggregate max on columns"""
type Quest_max_fields {
  description: String
  id: uuid
  name: String
  url: String
  xp: numeric
}

"""
order by max() on columns of table "Quest"
"""
input Quest_max_order_by {
  description: order_by
  id: order_by
  name: order_by
  url: order_by
  xp: order_by
}

"""aggregate min on columns"""
type Quest_min_fields {
  description: String
  id: uuid
  name: String
  url: String
  xp: numeric
}

"""
order by min() on columns of table "Quest"
"""
input Quest_min_order_by {
  description: order_by
  id: order_by
  name: order_by
  url: order_by
  xp: order_by
}

"""
response of any mutation on the table "Quest"
"""
type Quest_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [Quest!]!
}

"""
input type for inserting object relation for remote table "Quest"
"""
input Quest_obj_rel_insert_input {
  data: Quest_insert_input!
  on_conflict: Quest_on_conflict
}

"""
on conflict condition type for table "Quest"
"""
input Quest_on_conflict {
  constraint: Quest_constraint!
  update_columns: [Quest_update_column!]!
  where: Quest_bool_exp
}

"""
ordering options when selecting data from "Quest"
"""
input Quest_order_by {
  Quest_Completeds_aggregate: Quest_Completed_aggregate_order_by
  description: order_by
  id: order_by
  name: order_by
  url: order_by
  xp: order_by
}

"""
primary key columns input for table: "Quest"
"""
input Quest_pk_columns_input {
  id: uuid!
}

"""
select columns of table "Quest"
"""
enum Quest_select_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  url

  """column name"""
  xp
}

"""
input type for updating data in table "Quest"
"""
input Quest_set_input {
  description: String
  id: uuid
  name: String
  url: String
  xp: numeric
}

"""aggregate stddev on columns"""
type Quest_stddev_fields {
  xp: Float
}

"""
order by stddev() on columns of table "Quest"
"""
input Quest_stddev_order_by {
  xp: order_by
}

"""aggregate stddev_pop on columns"""
type Quest_stddev_pop_fields {
  xp: Float
}

"""
order by stddev_pop() on columns of table "Quest"
"""
input Quest_stddev_pop_order_by {
  xp: order_by
}

"""aggregate stddev_samp on columns"""
type Quest_stddev_samp_fields {
  xp: Float
}

"""
order by stddev_samp() on columns of table "Quest"
"""
input Quest_stddev_samp_order_by {
  xp: order_by
}

"""aggregate sum on columns"""
type Quest_sum_fields {
  xp: numeric
}

"""
order by sum() on columns of table "Quest"
"""
input Quest_sum_order_by {
  xp: order_by
}

"""
update columns of table "Quest"
"""
enum Quest_update_column {
  """column name"""
  description

  """column name"""
  id

  """column name"""
  name

  """column name"""
  url

  """column name"""
  xp
}

"""aggregate var_pop on columns"""
type Quest_var_pop_fields {
  xp: Float
}

"""
order by var_pop() on columns of table "Quest"
"""
input Quest_var_pop_order_by {
  xp: order_by
}

"""aggregate var_samp on columns"""
type Quest_var_samp_fields {
  xp: Float
}

"""
order by var_samp() on columns of table "Quest"
"""
input Quest_var_samp_order_by {
  xp: order_by
}

"""aggregate variance on columns"""
type Quest_variance_fields {
  xp: Float
}

"""
order by variance() on columns of table "Quest"
"""
input Quest_variance_order_by {
  xp: order_by
}

"""
expression to compare columns of type String. All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String
  _ilike: String
  _in: [String!]
  _is_null: Boolean
  _like: String
  _lt: String
  _lte: String
  _neq: String
  _nilike: String
  _nin: [String!]
  _nlike: String
  _nsimilar: String
  _similar: String
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "Account"
  """
  Account(
    """distinct select on columns"""
    distinct_on: [Account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Account_order_by!]

    """filter the rows returned"""
    where: Account_bool_exp
  ): [Account!]!

  """
  fetch aggregated fields from the table: "Account"
  """
  Account_aggregate(
    """distinct select on columns"""
    distinct_on: [Account_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Account_order_by!]

    """filter the rows returned"""
    where: Account_bool_exp
  ): Account_aggregate!

  """fetch data from the table: "Account" using primary key columns"""
  Account_by_pk(identifier: String!): Account

  """
  fetch data from the table: "Guild"
  """
  Guild(
    """distinct select on columns"""
    distinct_on: [Guild_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_order_by!]

    """filter the rows returned"""
    where: Guild_bool_exp
  ): [Guild!]!

  """
  fetch data from the table: "Guild_Member"
  """
  Guild_Member(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): [Guild_Member!]!

  """
  fetch aggregated fields from the table: "Guild_Member"
  """
  Guild_Member_aggregate(
    """distinct select on columns"""
    distinct_on: [Guild_Member_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_Member_order_by!]

    """filter the rows returned"""
    where: Guild_Member_bool_exp
  ): Guild_Member_aggregate!

  """fetch data from the table: "Guild_Member" using primary key columns"""
  Guild_Member_by_pk(guild_id: uuid!, player_id: uuid!): Guild_Member

  """
  fetch aggregated fields from the table: "Guild"
  """
  Guild_aggregate(
    """distinct select on columns"""
    distinct_on: [Guild_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Guild_order_by!]

    """filter the rows returned"""
    where: Guild_bool_exp
  ): Guild_aggregate!

  """fetch data from the table: "Guild" using primary key columns"""
  Guild_by_pk(id: uuid!): Guild

  """
  fetch data from the table: "Player"
  """
  Player(
    """distinct select on columns"""
    distinct_on: [Player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Player_order_by!]

    """filter the rows returned"""
    where: Player_bool_exp
  ): [Player!]!

  """
  fetch aggregated fields from the table: "Player"
  """
  Player_aggregate(
    """distinct select on columns"""
    distinct_on: [Player_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Player_order_by!]

    """filter the rows returned"""
    where: Player_bool_exp
  ): Player_aggregate!

  """fetch data from the table: "Player" using primary key columns"""
  Player_by_pk(id: uuid!): Player

  """
  fetch data from the table: "Quest"
  """
  Quest(
    """distinct select on columns"""
    distinct_on: [Quest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_order_by!]

    """filter the rows returned"""
    where: Quest_bool_exp
  ): [Quest!]!

  """
  fetch data from the table: "Quest_Completed"
  """
  Quest_Completed(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): [Quest_Completed!]!

  """
  fetch aggregated fields from the table: "Quest_Completed"
  """
  Quest_Completed_aggregate(
    """distinct select on columns"""
    distinct_on: [Quest_Completed_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_Completed_order_by!]

    """filter the rows returned"""
    where: Quest_Completed_bool_exp
  ): Quest_Completed_aggregate!

  """fetch data from the table: "Quest_Completed" using primary key columns"""
  Quest_Completed_by_pk(player_id: uuid!, quest_id: uuid!): Quest_Completed

  """
  fetch aggregated fields from the table: "Quest"
  """
  Quest_aggregate(
    """distinct select on columns"""
    distinct_on: [Quest_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [Quest_order_by!]

    """filter the rows returned"""
    where: Quest_bool_exp
  ): Quest_aggregate!

  """fetch data from the table: "Quest" using primary key columns"""
  Quest_by_pk(id: uuid!): Quest

  """
  fetch data from the table: "XPInterval"
  """
  XPInterval(
    """distinct select on columns"""
    distinct_on: [XPInterval_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [XPInterval_order_by!]

    """filter the rows returned"""
    where: XPInterval_bool_exp
  ): [XPInterval!]!

  """
  fetch aggregated fields from the table: "XPInterval"
  """
  XPInterval_aggregate(
    """distinct select on columns"""
    distinct_on: [XPInterval_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [XPInterval_order_by!]

    """filter the rows returned"""
    where: XPInterval_bool_exp
  ): XPInterval_aggregate!

  """
  fetch data from the table: "caca"
  """
  caca(
    """distinct select on columns"""
    distinct_on: [caca_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [caca_order_by!]

    """filter the rows returned"""
    where: caca_bool_exp
  ): [caca!]!

  """
  fetch aggregated fields from the table: "caca"
  """
  caca_aggregate(
    """distinct select on columns"""
    distinct_on: [caca_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [caca_order_by!]

    """filter the rows returned"""
    where: caca_bool_exp
  ): caca_aggregate!

  """fetch data from the table: "caca" using primary key columns"""
  caca_by_pk(id: Int!): caca

  """
  fetch data from the table: "popo"
  """
  popo(
    """distinct select on columns"""
    distinct_on: [popo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [popo_order_by!]

    """filter the rows returned"""
    where: popo_bool_exp
  ): [popo!]!

  """
  fetch aggregated fields from the table: "popo"
  """
  popo_aggregate(
    """distinct select on columns"""
    distinct_on: [popo_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [popo_order_by!]

    """filter the rows returned"""
    where: popo_bool_exp
  ): popo_aggregate!

  """fetch data from the table: "popo" using primary key columns"""
  popo_by_pk(id: uuid!): popo
}

scalar timestamp

"""
expression to compare columns of type timestamp. All fields are combined with logical 'AND'.
"""
input timestamp_comparison_exp {
  _eq: timestamp
  _gt: timestamp
  _gte: timestamp
  _in: [timestamp!]
  _is_null: Boolean
  _lt: timestamp
  _lte: timestamp
  _neq: timestamp
  _nin: [timestamp!]
}

scalar uuid

"""
expression to compare columns of type uuid. All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""
columns and relationships of "XPInterval"
"""
type XPInterval {
  """An object relationship"""
  Player: Player!
  endTime: date
  player_id: uuid!
  startTime: date
  xp: numeric!
}

"""
aggregated selection of "XPInterval"
"""
type XPInterval_aggregate {
  aggregate: XPInterval_aggregate_fields
  nodes: [XPInterval!]!
}

"""
aggregate fields of "XPInterval"
"""
type XPInterval_aggregate_fields {
  avg: XPInterval_avg_fields
  count(columns: [XPInterval_select_column!], distinct: Boolean): Int
  max: XPInterval_max_fields
  min: XPInterval_min_fields
  stddev: XPInterval_stddev_fields
  stddev_pop: XPInterval_stddev_pop_fields
  stddev_samp: XPInterval_stddev_samp_fields
  sum: XPInterval_sum_fields
  var_pop: XPInterval_var_pop_fields
  var_samp: XPInterval_var_samp_fields
  variance: XPInterval_variance_fields
}

"""
order by aggregate values of table "XPInterval"
"""
input XPInterval_aggregate_order_by {
  avg: XPInterval_avg_order_by
  count: order_by
  max: XPInterval_max_order_by
  min: XPInterval_min_order_by
  stddev: XPInterval_stddev_order_by
  stddev_pop: XPInterval_stddev_pop_order_by
  stddev_samp: XPInterval_stddev_samp_order_by
  sum: XPInterval_sum_order_by
  var_pop: XPInterval_var_pop_order_by
  var_samp: XPInterval_var_samp_order_by
  variance: XPInterval_variance_order_by
}

"""
input type for inserting array relation for remote table "XPInterval"
"""
input XPInterval_arr_rel_insert_input {
  data: [XPInterval_insert_input!]!
}

"""aggregate avg on columns"""
type XPInterval_avg_fields {
  xp: Float
}

"""
order by avg() on columns of table "XPInterval"
"""
input XPInterval_avg_order_by {
  xp: order_by
}

"""
Boolean expression to filter rows from the table "XPInterval". All fields are combined with a logical 'AND'.
"""
input XPInterval_bool_exp {
  Player: Player_bool_exp
  _and: [XPInterval_bool_exp]
  _not: XPInterval_bool_exp
  _or: [XPInterval_bool_exp]
  endTime: date_comparison_exp
  player_id: uuid_comparison_exp
  startTime: date_comparison_exp
  xp: numeric_comparison_exp
}

"""
input type for incrementing integer column in table "XPInterval"
"""
input XPInterval_inc_input {
  xp: numeric
}

"""
input type for inserting data into table "XPInterval"
"""
input XPInterval_insert_input {
  Player: Player_obj_rel_insert_input
  endTime: date
  player_id: uuid
  startTime: date
  xp: numeric
}

"""aggregate max on columns"""
type XPInterval_max_fields {
  endTime: date
  player_id: uuid
  startTime: date
  xp: numeric
}

"""
order by max() on columns of table "XPInterval"
"""
input XPInterval_max_order_by {
  endTime: order_by
  player_id: order_by
  startTime: order_by
  xp: order_by
}

"""aggregate min on columns"""
type XPInterval_min_fields {
  endTime: date
  player_id: uuid
  startTime: date
  xp: numeric
}

"""
order by min() on columns of table "XPInterval"
"""
input XPInterval_min_order_by {
  endTime: order_by
  player_id: order_by
  startTime: order_by
  xp: order_by
}

"""
response of any mutation on the table "XPInterval"
"""
type XPInterval_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [XPInterval!]!
}

"""
input type for inserting object relation for remote table "XPInterval"
"""
input XPInterval_obj_rel_insert_input {
  data: XPInterval_insert_input!
}

"""
ordering options when selecting data from "XPInterval"
"""
input XPInterval_order_by {
  Player: Player_order_by
  endTime: order_by
  player_id: order_by
  startTime: order_by
  xp: order_by
}

"""
select columns of table "XPInterval"
"""
enum XPInterval_select_column {
  """column name"""
  endTime

  """column name"""
  player_id

  """column name"""
  startTime

  """column name"""
  xp
}

"""
input type for updating data in table "XPInterval"
"""
input XPInterval_set_input {
  endTime: date
  player_id: uuid
  startTime: date
  xp: numeric
}

"""aggregate stddev on columns"""
type XPInterval_stddev_fields {
  xp: Float
}

"""
order by stddev() on columns of table "XPInterval"
"""
input XPInterval_stddev_order_by {
  xp: order_by
}

"""aggregate stddev_pop on columns"""
type XPInterval_stddev_pop_fields {
  xp: Float
}

"""
order by stddev_pop() on columns of table "XPInterval"
"""
input XPInterval_stddev_pop_order_by {
  xp: order_by
}

"""aggregate stddev_samp on columns"""
type XPInterval_stddev_samp_fields {
  xp: Float
}

"""
order by stddev_samp() on columns of table "XPInterval"
"""
input XPInterval_stddev_samp_order_by {
  xp: order_by
}

"""aggregate sum on columns"""
type XPInterval_sum_fields {
  xp: numeric
}

"""
order by sum() on columns of table "XPInterval"
"""
input XPInterval_sum_order_by {
  xp: order_by
}

"""aggregate var_pop on columns"""
type XPInterval_var_pop_fields {
  xp: Float
}

"""
order by var_pop() on columns of table "XPInterval"
"""
input XPInterval_var_pop_order_by {
  xp: order_by
}

"""aggregate var_samp on columns"""
type XPInterval_var_samp_fields {
  xp: Float
}

"""
order by var_samp() on columns of table "XPInterval"
"""
input XPInterval_var_samp_order_by {
  xp: order_by
}

"""aggregate variance on columns"""
type XPInterval_variance_fields {
  xp: Float
}

"""
order by variance() on columns of table "XPInterval"
"""
input XPInterval_variance_order_by {
  xp: order_by
}

